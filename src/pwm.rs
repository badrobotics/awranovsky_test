#![allow(non_snake_case)]

use volatile_register::{RW, RO, WO};

#[repr(C)]
struct Pwm {
    pub PWMCTL: RW<u32>,
    pub PWMSYNC: RW<u32>,
    pub PWMENABLE: RW<u32>,
    pub PWMINVERT: RW<u32>,
    pub PWMFAULT: RW<u32>,
    pub PWMINTEN: RW<u32>,
    pub PWMRIS: RO<u32>,
    pub PWMISC: RW<u32>,
    pub PWMSTATUS: RO<u32>,
    pub PWMFAULTVAL: RW<u32>,
    pub PWMENUPD: RW<u32>,
    Reserved0: [RO<u32>; 5],
    pub PWM0CTL: RW<u32>,
    pub PWM0INTEN: RW<u32>,
    pub PWM0RIS: RO<u32>,
    pub PWM0ISC: RW<u32>,
    pub PWM0LOAD: RW<u32>,
    pub PWM0COUNT: RO<u32>,
    pub PWM0CMPA: RW<u32>,
    pub PWM0CMPB: RW<u32>,
    pub PWM0GENA: RW<u32>,
    pub PWM0GENB: RW<u32>,
    pub PWM0DBCTL: RW<u32>,
    pub PWM0DBRISE: RW<u32>,
    pub PWM0DBFALL: RW<u32>,
    pub PWM0FLTSRC0: RW<u32>,
    pub PWM0FLTSRC1: RW<u32>,
    pub PWM0MINFLTPER: RW<u32>,
    pub PWM1CTL: RW<u32>,
    pub PWM1INTEN: RW<u32>,
    pub PWM1RIS: RO<u32>,
    pub PWM1ISC: RW<u32>,
    pub PWM1LOAD: RW<u32>,
    pub PWM1COUNT: RO<u32>,
    pub PWM1CMPA: RW<u32>,
    pub PWM1CMPB: RW<u32>,
    pub PWM1GENA: RW<u32>,
    pub PWM1GENB: RW<u32>,
    pub PWM1DBCTL: RW<u32>,
    pub PWM1DBRISE: RW<u32>,
    pub PWM1DBFALL: RW<u32>,
    pub PWM1FLTSRC0: RW<u32>,
    pub PWM1FLTSRC1: RW<u32>,
    pub PWM1MINFLTPER: RW<u32>,
    pub PWM2CTL: RW<u32>,
    pub PWM2INTEN: RW<u32>,
    pub PWM2RIS: RO<u32>,
    pub PWM2ISC: RW<u32>,
    pub PWM2LOAD: RW<u32>,
    pub PWM2COUNT: RO<u32>,
    pub PWM2CMPA: RW<u32>,
    pub PWM2CMPB: RW<u32>,
    pub PWM2GENA: RW<u32>,
    pub PWM2GENB: RW<u32>,
    pub PWM2DBCTL: RW<u32>,
    pub PWM2DBRISE: RW<u32>,
    pub PWM2DBFALL: RW<u32>,
    pub PWM2FLTSRC0: RW<u32>,
    pub PWM2FLTSRC1: RW<u32>,
    pub PWM2MINFLTPER: RW<u32>,
    pub PWM3CTL: RW<u32>,
    pub PWM3INTEN: RW<u32>,
    pub PWM3RIS: RO<u32>,
    pub PWM3ISC: RW<u32>,
    pub PWM3LOAD: RW<u32>,
    pub PWM3COUNT: RO<u32>,
    pub PWM3CMPA: RW<u32>,
    pub PWM3CMPB: RW<u32>,
    pub PWM3GENA: RW<u32>,
    pub PWM3GENB: RW<u32>,
    pub PWM3DBCTL: RW<u32>,
    pub PWM3DBRISE: RW<u32>,
    pub PWM3DBFALL: RW<u32>,
    pub PWM3FLTSRC0: RW<u32>,
    pub PWM3FLTSRC1: RW<u32>,
    pub PWM3MINFLTPER: RW<u32>,
    Reserved1: [RO<u32>; 432],
    pub PWM0FLTSEN: RW<u32>,
    pub PWM0FLTSTAT0: RW<u32>,
    pub PWM0FLTSTAT1: RW<u32>,
    Reserved2: [RO<u32>; 29],
    pub PWM1FLTSEN: RW<u32>,
    pub PWM1FLTSTAT0: RW<u32>,
    pub PWM1FLTSTAT1: RW<u32>,
    Reserved3: [RO<u32>; 29],
    pub PWM2FLTSEN: RW<u32>,
    pub PWM2FLTSTAT0: RW<u32>,
    pub PWM2FLTSTAT1: RW<u32>,
    Reserved4: [RO<u32>; 29],
    pub PWM3FLTSEN: RW<u32>,
    pub PWM3FLTSTAT0: RW<u32>,
    pub PWM3FLTSTAT1: RW<u32>,
    Reserved5: [RO<u32>; 397],
    pub PWMPP: RO<u32>,
    Reserved6: [RO<u32>; 1],
    pub PWMCC: RW<u32>,
}

impl Pwm {
    pub fn configure(&mut self) {
    }
}
